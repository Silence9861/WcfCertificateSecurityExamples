<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <system.web>
    <compilation debug="true" />
  </system.web>
  <system.serviceModel>
    <services>
      <service name="TwoWayAuthenticationBasicService.BasicService" behaviorConfiguration="DefaultBehavior">
        <endpoint address="" binding="customBinding" bindingConfiguration="SecureBinding" contract="TwoWayAuthenticationBasicService.IBasicService">
          <identity>
            <!--The dns value should also be the same as the subject name of the service certificate-->
            <dns value="localhost"/>
          </identity>
        </endpoint>
        <endpoint address="mex" binding="mexTcpBinding" contract="IMetadataExchange"/>
        <host>
          <baseAddresses>
            <add baseAddress="net.tcp://localhost:51111/TwoWayAuthenticationBasicService/"/>
          </baseAddresses>
        </host>
      </service>
    </services>
    <bindings>
      <customBinding>
        <!--Endpoint binding is defined here for BasicService-->
        <!--The ordering of the customBinding elements is important as it is the order in which they are applied to messages-->
        <!--The ordering should be (Transactions => Reliable Messaging => Security => Encoding => Transport)-->
        <binding name="SecureBinding">
          <!--security binding is required for certificate authentication to occur-->
          <security authenticationMode="SecureConversation">
            <!--MutualSslNegotiated specifies we are going to be authenticating both the client and service with x509 certificates-->
            <secureConversationBootstrap authenticationMode="MutualSslNegotiated"/>
          </security>
          <!--sslStreamSecurity binding supports channel security using an SSL stream-->
          <sslStreamSecurity/>
          <binaryMessageEncoding />
          <tcpTransport />
        </binding>
      </customBinding>
    </bindings>
    <behaviors>
      <serviceBehaviors>
        <!--Certificate information is defined by a service's behaviorConfiguration, the BasicService uses "DefaultBehavior" here-->
        <behavior name="DefaultBehavior">
          <!--Service Certificate is defined here-->
          <serviceCredentials>
            <!--The current find value is the certificates thumbprint, for most cases, you will want to use this as the find value as it will be unique to each certificate-->
            <!--To specify we are searching for a certificate on the machine based on its thumbprint, x509FindType is specified to be FindByThumprint-->
            <!--storeName specifies which store that the certificate is installed it and where we will be looking-->
            <!--storeLocation specifies whether we are looking at the stores on the whole machine, or the one specific to the currently signed on user-->
            <serviceCertificate findValue="9AA0366F9853B65919E765906113696BD253E5AA" storeLocation="LocalMachine" storeName="TrustedPeople" x509FindType="FindByThumbprint"/>
            
            <!--We also want to use a client certificate this time, so we need to specify how we are going to authenticate it on the service's app.config-->
            <clientCertificate>
              <!--certificateValidationMode speficies the type of validation we are using for a certificate-->
              <!--If we want to use self-signed certificates, we have to use PeerTrust or PeerOrChainTrust-->
              <!--Another requirement of self-signed certificates is that they must be installed in the TrustedPeople store-->
              <!--A self signed certificate will fail on chain trust as it does not have a chain of trust to valid CAs on the machine-->
              <!--trustedStoreLocation specifies the location where the service Certificates chain is-->
              <!--revocationMode speficies whether or not we want to check if the certificate is a part of the revocation list, if set to offline, it will use a cached revocation list-->
              <authentication certificateValidationMode="PeerTrust" trustedStoreLocation="LocalMachine" revocationMode="NoCheck"/>
            </clientCertificate>
          </serviceCredentials>

          <serviceMetadata httpGetEnabled="false" httpsGetEnabled="false"/>
          <serviceDebug includeExceptionDetailInFaults="false"/>
        </behavior>
      </serviceBehaviors>
    </behaviors>
  </system.serviceModel>
</configuration>

<!--You can verify that a certificate is being used by opening up the Event Viewer and looking under the security tab, there should be an Open Key event with Audit Success-->
